package com.example.demo.services;

import com.example.demo.entities.Role;
import com.example.demo.entities.User;

import com.example.demo.repositories.RoleRepository;
import com.example.demo.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class UserService {

    private final UserRepository userRepository;
    private final RoleService roleService;


    @Autowired
    public UserService(RoleService roleService, UserRepository userRepository) {
        this.userRepository = userRepository;
        this.roleService = roleService;
    }

    public User createUser(User user) {
        return userRepository.save(user);
    }

    public Page<User> getAllUsers(Pageable pageable) {
        return userRepository.findAll(pageable);
    }

    public Optional<User> getUserById(UUID id) {
        return userRepository.findById(id);
    }

    public User updateUser(UUID id, User updatedUser) {
        return userRepository.findById(id)
                .map(user -> {
                    user.setUsername(updatedUser.getUsername());
                    user.setEmail(updatedUser.getEmail());
                    user.setFirstName(updatedUser.getFirstName());
                    user.setDateOfBirth(updatedUser.getDateOfBirth());
                    return userRepository.save(user);
                })
                .orElse(null);
    }

    public void deleteUser(UUID id) {
        userRepository.deleteById(id);
    }

    public Optional<User> findByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    public void deleteAllUsers() {
        userRepository.deleteAll();
    }

    public User setRoleToUser(UUID userId, UUID roleId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        Role role = roleService.getRoleById(roleId)
                .orElseThrow(() -> new RuntimeException("Role not found"));
        user.setRole(role);
        return userRepository.save(user);
    }

    public User modifyRoleOfUser(UUID userId, UUID roleId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        Role role = roleService.getRoleById(roleId)
                .orElseThrow(() -> new RuntimeException("Role not found"));
        user.setRole(role);
        return userRepository.save(user);
    }

    public User deleteRoleOfUser(UUID userId, UUID roleId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        Role role = roleService.getRoleById(roleId)
                .orElseThrow(() -> new RuntimeException("Role not found"));
        if (user.getRole() != null && user.getRole().getId().equals(role.getId())) {
            user.setRole(null);
            return userRepository.save(user);
        }
        throw new RuntimeException("User does not have the specified role");
    }

    public String getUsrRole(UUID id) {
        return userRepository.findById(id)
                .map(User::getRole)
                .map(Role::getNom)
                .orElse(null);
    }

    public List<User> createUsers(List<User> users) {
        return userRepository.saveAll(users);
    }
}
